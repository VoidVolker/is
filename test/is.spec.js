// Generated by CoffeeScript 2.7.0
var TestClass, arrays, booleans, functions, nan, notArrays, notBooleans, notFunctions, notNumbers, notObjects, notStrings, nulls, numbers, objects, strings, tableIs, tableTypeGet;

import {
  isBoolean,
  isNumber,
  isString,
  isArray,
  isObject,
  isFunction,
  typeGet
} from '../';

TestClass = class TestClass {};

booleans = [true, false, new Boolean(true), new Boolean(false)];

numbers = [0, 1, -2.2, new Number(333), 2e308];

strings = ["", "str", new String("string")];

arrays = [
  [
    [
      1,
      2,
      3 // Jest has bug with arrays unwrapping
    ]
  ],
  new Array([4,
  5,
  6])
];

objects = [
  {
    prop: 'value'
  },
  new Object({
    field: 'field'
  }),
  new TestClass()
];

functions = [function() {}, () => {}, TestClass, Number, String, Array, Object, Date];

nulls = [null, void 0];

nan = [0/0];

notBooleans = [].concat(numbers, strings, arrays, objects, functions, nulls, nan);

notNumbers = [].concat(booleans, strings, arrays, objects, functions, nulls, nan);

notStrings = [].concat(booleans, numbers, arrays, objects, functions, nulls, nan);

notArrays = [].concat(booleans, numbers, strings, objects, functions, nulls, nan);

notObjects = [].concat(booleans, numbers, strings, arrays, functions, nulls, nan);

notFunctions = [].concat(booleans, numbers, strings, arrays, objects, nulls, nan);

tableIs = [['Boolean', isBoolean, booleans, notBooleans], ['Number', isNumber, numbers, notNumbers], ['String', isString, strings, notStrings], ['Array', isArray, arrays, notArrays], ['Object', isObject, objects, notObjects], ['Function', isFunction, functions, notFunctions]];

tableTypeGet = [
  ['Boolean',
  isBoolean,
  booleans,
  notBooleans],
  [
    'Number',
    isNumber,
    numbers,
    notNumbers.filter((v) => {
      return !isNaN(v); // Exclude NaN
    })
  ],
  ['String',
  isString,
  strings,
  notStrings],
  ['Array',
  isArray,
  arrays,
  notArrays],
  ['Object',
  isObject,
  objects,
  notObjects],
  ['Function',
  isFunction,
  functions,
  notFunctions]
];

describe('is', () => {
  return describe.each(tableIs)('%s', (type, xt, isType, notType) => {
    describe('true', () => {
      return it.each(isType)('%s', (value) => {
        return expect(xt(value)).toBe(true);
      });
    });
    return describe('false', () => {
      return it.each(notType)('%s', (value) => {
        return expect(xt(value)).toBe(false);
      });
    });
  });
});

describe('typeGet', () => {
  return describe.each(tableTypeGet)('%s', (type, xt, isType, notType) => {
    describe('is', () => {
      return it.each(isType)('%s', (value) => {
        return expect(typeGet(value)).toBe(type);
      });
    });
    return describe('not', () => {
      return it.each(notType)('%s', (value) => {
        return expect(typeGet(value)).not.toBe(type);
      });
    });
  });
});

//# sourceMappingURL=data:application/json;base64,
